// Configures the Prisma Client, the auto-generated library that
// lets your application talk to the database.
generator client {
  provider = "prisma-client-js"
  // Specifies where the generated TypeScript client will be located.
  // This keeps it separate from your source code.
  output   = "../generated/prisma"
}

// Defines the connection to your database. The `env()` function pulls
// the connection string from an environment variable for security.
datasource db {
  provider = "mongodb" // Using MongoDB, a NoSQL database
  url      = env("DATABASE_URL") // The secret connection string, kept safe in a .env file
}

// Represents profile images for users. This is a separate collection
// in MongoDB, allowing for a one-to-one relationship with a user.
model images {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  // The unique identifier for the actual image file (e.g., in storage like S3)
  file_id String
  // The public URL where the image can be accessed
  url     String
  // The id of the user who owns this avatar. The '?' marks it as optional.
  userId  String? @unique @db.ObjectId
  // The relation field that links this image back to a single user.
  // This creates a one-to-one relationship: one avatar for one user.
  users   users?  @relation(fields: [userId], references: [id])
}

// The main User model. Each field here becomes a property in the
// 'users' collection in MongoDB.
model users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique // Ensures no two users can have the same email
  password  String?  // Optional because users might sign in with OAuth (e.g., Google)
  // An array of User IDs. This is how you represent a 'followers' or
  // 'following' list in a NoSQL database like MongoDB.
  following String[]
  // The optional relation to the user's avatar image.
  // This is the other side of the one-to-one relationship defined in the images model.
  avatar    images?
  createdAt DateTime @default(now()) // Automatically set when a user is created
  updatedAt DateTime @updatedAt // Automatically updated whenever the user record changes
}
