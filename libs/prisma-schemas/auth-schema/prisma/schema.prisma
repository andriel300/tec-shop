generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/prisma/auth-client"
}

datasource db {
  provider = "mongodb"
  url      = env("AUTH_SERVICE_DB_URL")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String?
  isEmailVerified     Boolean              @default(false)
  googleId            String?              @unique
  provider            String               @default("local")
  refreshToken        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  passwordResetTokens PasswordResetToken[]
  shopReviews         ShopReview[]
}

model ShopReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  shopId    String   @db.ObjectId
  shop      Shop     @relation(fields: [shopId], references: [id])
  rating    Float
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  bio          String?
  category     String
  coverBanner  String?
  address      String
  openingHours String?
  website      String?
  socialLinks  Json[]
  rating       Float        @default(0)
  reviews      ShopReview[]
  sellerId     String       @unique @db.ObjectId
  seller       Seller       @relation(fields: [sellerId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Seller {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String // Added missing name field
  email       String   @unique
  phoneNumber String
  country     String
  password    String?
  stripeId    String?  @unique
  shop        Shop?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
