generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/seller-client"
}

datasource db {
  provider = "mongodb"
  url      = env("SELLER_SERVICE_DB_URL")
}

model Seller {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  authId      String  @unique @db.ObjectId // Links to auth-service User.id
  name        String
  email       String  @unique
  phoneNumber String
  country     String
  isVerified  Boolean @default(false)

  // Stripe Connect fields
  stripeAccountId        String?           @unique // Stripe Connect account ID
  stripeOnboardingStatus StripeStatus      @default(NOT_STARTED)
  stripeDetailsSubmitted Boolean           @default(false)
  stripePayoutsEnabled   Boolean           @default(false)
  stripeChargesEnabled   Boolean           @default(false)
  stripeOnboardingUrl    String?           // Current onboarding URL
  stripeRequirements     Json?             // Required fields from Stripe
  stripeLastUpdated      DateTime?         // Last webhook update

  // Business info
  shop Shop?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  sellerId String @unique @db.ObjectId
  seller   Seller @relation(fields: [sellerId], references: [id])

  businessName String
  bio          String?
  description  String? // Deprecated in favor of bio
  category     String
  address      String
  openingHours String
  website      String?
  socialLinks  Json[]

  // Shop metrics
  rating      Float   @default(0)
  totalOrders Int     @default(0)
  isActive    Boolean @default(true)

  // Relations
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?

  // Hierarchical categories
  parentId    String?    @db.ObjectId
  parent      Category?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryTree")

  // Category-specific attributes definition
  // e.g., { "brand": { "required": true, "type": "select" }, "warranty": { "required": false, "type": "text" } }
  attributes  Json?

  image       String?
  isActive    Boolean    @default(true)
  position    Int        @default(0)

  products    Product[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([parentId])
  @@index([isActive])
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)

  products    Product[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([isActive])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId      String   @db.ObjectId
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  // Basic Information
  name        String
  description String   // Rich text (HTML)

  // Category & Brand
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  brandId     String?  @db.ObjectId
  brand       Brand?   @relation(fields: [brandId], references: [id])

  // Product Type
  productType ProductType @default(SIMPLE)

  // Pricing (for simple products, variants have their own pricing)
  price       Float
  salePrice   Float?

  // Stock (for simple products)
  stock       Int      @default(0)

  // Images stored as array of file paths
  images      String[] // e.g., ["/uploads/product-123-0.jpg"]

  // Product Variants (for variable products)
  hasVariants Boolean          @default(false)
  variants    ProductVariant[]

  // Dynamic Attributes (category-specific)
  // e.g., { "warranty": "1 year", "material": "Cotton", "color": "Red" }
  attributes  Json?

  // Shipping Information
  shipping    Json?    // { weight, dimensions: { length, width, height }, freeShipping, shippingClass }

  // SEO
  seo         Json?    // { title, description, slug, keywords }
  slug        String?  @unique

  // Inventory
  inventory   Json?    // { sku, trackInventory, lowStockThreshold, allowBackorders, stockStatus }

  // Additional Fields
  warranty    String?
  tags        String[] @default([])

  // Status
  status      ProductStatus    @default(DRAFT)
  visibility  ProductVisibility @default(PUBLIC)
  publishDate DateTime?

  // Flags
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)

  // Sales metrics
  views       Int      @default(0)
  sales       Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([shopId])
  @@index([categoryId])
  @@index([brandId])
  @@index([isActive])
  @@index([status])
  @@index([productType])
}

model ProductVariant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  sku         String   @unique

  // Variant attributes (e.g., { "size": "M", "color": "Red" })
  attributes  Json

  // Pricing
  price       Float
  salePrice   Float?

  // Stock
  stock       Int      @default(0)

  // Image (optional, specific to this variant)
  image       String?

  isActive    Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([isActive])
}

enum ProductType {
  SIMPLE      // Single product, no variants
  VARIABLE    // Product with variants (size, color, etc.)
  DIGITAL     // Digital/downloadable product
}

enum ProductStatus {
  DRAFT       // Not published yet
  PUBLISHED   // Live and visible
  SCHEDULED   // Scheduled for future publish
}

enum ProductVisibility {
  PUBLIC              // Visible to everyone
  PRIVATE             // Only visible to shop owner
  PASSWORD_PROTECTED  // Requires password to view
}

enum StripeStatus {
  NOT_STARTED     // Seller hasn't started Stripe onboarding
  PENDING         // Account created, onboarding in progress
  INCOMPLETE      // Onboarding started but missing information
  COMPLETE        // Fully onboarded and can accept payments
  RESTRICTED      // Account restricted due to issues
  REJECTED        // Account rejected by Stripe
}
